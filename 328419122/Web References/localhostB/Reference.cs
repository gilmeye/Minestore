//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.42000.
// 
#pragma warning disable 1591

namespace _328419122.localhostB {
    using System.Diagnostics;
    using System;
    using System.Xml.Serialization;
    using System.ComponentModel;
    using System.Web.Services.Protocols;
    using System.Web.Services;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="BankSoap", Namespace="http://tempuri.org/")]
    public partial class Bank : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback AddAccountOperationCompleted;
        
        private System.Threading.SendOrPostCallback DoesExistOperationCompleted;
        
        private System.Threading.SendOrPostCallback HasAmountOperationCompleted;
        
        private System.Threading.SendOrPostCallback PayOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetBalanceOperationCompleted;
        
        private System.Threading.SendOrPostCallback AddToBalanceOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public Bank() {
            this.Url = global::_328419122.Properties.Settings.Default._328419122_localhostB_Bank;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event AddAccountCompletedEventHandler AddAccountCompleted;
        
        /// <remarks/>
        public event DoesExistCompletedEventHandler DoesExistCompleted;
        
        /// <remarks/>
        public event HasAmountCompletedEventHandler HasAmountCompleted;
        
        /// <remarks/>
        public event PayCompletedEventHandler PayCompleted;
        
        /// <remarks/>
        public event GetBalanceCompletedEventHandler GetBalanceCompleted;
        
        /// <remarks/>
        public event AddToBalanceCompletedEventHandler AddToBalanceCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/AddAccount", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void AddAccount(int id, string cnam, int cvc, int balance) {
            this.Invoke("AddAccount", new object[] {
                        id,
                        cnam,
                        cvc,
                        balance});
        }
        
        /// <remarks/>
        public void AddAccountAsync(int id, string cnam, int cvc, int balance) {
            this.AddAccountAsync(id, cnam, cvc, balance, null);
        }
        
        /// <remarks/>
        public void AddAccountAsync(int id, string cnam, int cvc, int balance, object userState) {
            if ((this.AddAccountOperationCompleted == null)) {
                this.AddAccountOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddAccountOperationCompleted);
            }
            this.InvokeAsync("AddAccount", new object[] {
                        id,
                        cnam,
                        cvc,
                        balance}, this.AddAccountOperationCompleted, userState);
        }
        
        private void OnAddAccountOperationCompleted(object arg) {
            if ((this.AddAccountCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddAccountCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/DoesExist", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool DoesExist(int id, string cnum, int cvc) {
            object[] results = this.Invoke("DoesExist", new object[] {
                        id,
                        cnum,
                        cvc});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void DoesExistAsync(int id, string cnum, int cvc) {
            this.DoesExistAsync(id, cnum, cvc, null);
        }
        
        /// <remarks/>
        public void DoesExistAsync(int id, string cnum, int cvc, object userState) {
            if ((this.DoesExistOperationCompleted == null)) {
                this.DoesExistOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDoesExistOperationCompleted);
            }
            this.InvokeAsync("DoesExist", new object[] {
                        id,
                        cnum,
                        cvc}, this.DoesExistOperationCompleted, userState);
        }
        
        private void OnDoesExistOperationCompleted(object arg) {
            if ((this.DoesExistCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DoesExistCompleted(this, new DoesExistCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/HasAmount", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool HasAmount(int id, int price) {
            object[] results = this.Invoke("HasAmount", new object[] {
                        id,
                        price});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void HasAmountAsync(int id, int price) {
            this.HasAmountAsync(id, price, null);
        }
        
        /// <remarks/>
        public void HasAmountAsync(int id, int price, object userState) {
            if ((this.HasAmountOperationCompleted == null)) {
                this.HasAmountOperationCompleted = new System.Threading.SendOrPostCallback(this.OnHasAmountOperationCompleted);
            }
            this.InvokeAsync("HasAmount", new object[] {
                        id,
                        price}, this.HasAmountOperationCompleted, userState);
        }
        
        private void OnHasAmountOperationCompleted(object arg) {
            if ((this.HasAmountCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.HasAmountCompleted(this, new HasAmountCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Pay", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void Pay(int id, int price) {
            this.Invoke("Pay", new object[] {
                        id,
                        price});
        }
        
        /// <remarks/>
        public void PayAsync(int id, int price) {
            this.PayAsync(id, price, null);
        }
        
        /// <remarks/>
        public void PayAsync(int id, int price, object userState) {
            if ((this.PayOperationCompleted == null)) {
                this.PayOperationCompleted = new System.Threading.SendOrPostCallback(this.OnPayOperationCompleted);
            }
            this.InvokeAsync("Pay", new object[] {
                        id,
                        price}, this.PayOperationCompleted, userState);
        }
        
        private void OnPayOperationCompleted(object arg) {
            if ((this.PayCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.PayCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetBalance", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int GetBalance(int id) {
            object[] results = this.Invoke("GetBalance", new object[] {
                        id});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void GetBalanceAsync(int id) {
            this.GetBalanceAsync(id, null);
        }
        
        /// <remarks/>
        public void GetBalanceAsync(int id, object userState) {
            if ((this.GetBalanceOperationCompleted == null)) {
                this.GetBalanceOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetBalanceOperationCompleted);
            }
            this.InvokeAsync("GetBalance", new object[] {
                        id}, this.GetBalanceOperationCompleted, userState);
        }
        
        private void OnGetBalanceOperationCompleted(object arg) {
            if ((this.GetBalanceCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetBalanceCompleted(this, new GetBalanceCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/AddToBalance", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void AddToBalance(int id, int mulah) {
            this.Invoke("AddToBalance", new object[] {
                        id,
                        mulah});
        }
        
        /// <remarks/>
        public void AddToBalanceAsync(int id, int mulah) {
            this.AddToBalanceAsync(id, mulah, null);
        }
        
        /// <remarks/>
        public void AddToBalanceAsync(int id, int mulah, object userState) {
            if ((this.AddToBalanceOperationCompleted == null)) {
                this.AddToBalanceOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddToBalanceOperationCompleted);
            }
            this.InvokeAsync("AddToBalance", new object[] {
                        id,
                        mulah}, this.AddToBalanceOperationCompleted, userState);
        }
        
        private void OnAddToBalanceOperationCompleted(object arg) {
            if ((this.AddToBalanceCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddToBalanceCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void AddAccountCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void DoesExistCompletedEventHandler(object sender, DoesExistCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DoesExistCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DoesExistCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void HasAmountCompletedEventHandler(object sender, HasAmountCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class HasAmountCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal HasAmountCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void PayCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void GetBalanceCompletedEventHandler(object sender, GetBalanceCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetBalanceCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetBalanceCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void AddToBalanceCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
}

#pragma warning restore 1591